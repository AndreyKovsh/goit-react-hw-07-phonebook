{"version":3,"sources":["components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["Container","children","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contact","post","then","data","catch","error","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","includes","Form","useDispatch","useSelector","useState","setName","setNumber","handleChange","e","target","value","resetInput","onSubmit","preventDefault","find","checkRepeatName","checkRepeatNumber","trim","checkEmptyQuery","test","checkValidNumber","ContactOperations","toast","info","type","onChange","placeholder","Filter","ContactList","visibleContacts","map","onClick","onDeleteContact","App","autoClose","Component","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d509507b.chunk.js","sourcesContent":["import T from 'prop-types';\n\nconst Container = ({ children }) => {\n  return <div>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: T.node.isRequired,\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchcontactsRequest');\n\nexport const fetchContactSuccess = createAction('contacts/fetchcontactsSuccess');\n\nexport const fetchContactError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\n\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\n\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\n\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\n\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n\n\nexport const changeFilter = createAction('contacs/changeFilter');\n\n\n// import shortid from 'shortid';\n// import { createAction } from '@reduxjs/toolkit';\n// import { ADD, DELETE, CHANGE_FILTER } from './types';\n\n// export const addContact = createAction(ADD, (name, number) => ({\n//   payload: {\n//     id: shortid.generate(),\n//     name,\n//     number,\n//   },\n// }));\n// export const deleteContact = createAction(DELETE);\n\n// export const changeFilter = createAction(CHANGE_FILTER);\n\n// export default { addContact, deleteContact, changeFilter };\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest);\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact\r\n};","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoader = (state) => state.contacts.loading; \n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(\n    ({ name }) =>\n      name && name.toLowerCase && name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport * as ContactOperations from '../../redux/contacts/contacts-operations'\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\n\nfunction Form() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const checkRepeatName = name => {\n    return contacts.find(contact => contact.name === name);\n  };\n\n  const checkRepeatNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const checkEmptyQuery = (name, number) => {\n    return name.trim() === '' || number.trim() === '';\n  };\n\n  const checkValidNumber = number => {\n    return !/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkRepeatName(name)) {\n      toast(` ${name}' is already in use `);\n    } else if (checkRepeatNumber(number)) {\n      toast(` ${number} is already in use `);\n    } else if (checkEmptyQuery(name, number)) {\n      toast.info(' Enter the correct name and number ');\n    } else if (checkValidNumber(number)) {\n      toast.error(' Enter the correct phone number ');\n    } else {\n      dispatch(ContactOperations.addContact(name, number));\n    }\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\"Andrey Kovsh\"\n            />\n          </label>\n          <label>\n            Phone number\n            <input\n              type=\"text\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              placeholder=\"817-18-41\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n\n// import { useState } from 'react';\n\n// function Form({ onSubmit }) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleChange = event => {\n//     const { name, value } = event.target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     onSubmit(name, number);\n\n//     resetInput();\n//   };\n//   const resetInput = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={name}\n//               onChange={handleChange}\n//               placeholder=\"Andrey Kovsh\"\n//             />\n//           </label>\n//           <label>\n//             Phone number\n//             <input\n//               type=\"text\"\n//               name=\"number\"\n//               value={number}\n//               onChange={handleChange}\n//               placeholder=\"817-18-41\"\n//             />\n//           </label>\n//           <button type=\"submit\">Add contact</button>\n//         </div>\n//       </form>\n//     </>\n//   );\n// }\n\n// export default Form;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport * as ContactOperations from '../../redux/contacts/contacts-actions';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const change = e => dispatch(ContactOperations.changeFilter(e.target.value));\n\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={change} />\n    </label>\n  );\n}\n\n// import React from 'react';\n\n// const Filter = ({ value, onChange }) => (\n//   <label>\n//     Find contacts by name\n//     <input type=\"text\" value={value} onChange={onChange} />\n//   </label>\n// );\n\n// export default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as ContactOperations from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(getVisibleContacts);\n  const onDeleteContact = (id) => dispatch(ContactOperations.deleteContact(id));\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>\n            <b>{name} </b>\n            <em>{number}</em>\n          </p>\n          <button type=\"button\" onClick={() => onDeleteContact(id)}>\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// import { useSelector, useDispatch } from 'react-redux';\n// import { deleteContact } from '../../redux/contacts/contacts-actions';\n// import { getVisibleContacts, getContacts } from '../../redux/contacts/contacts-selectors';\n\n// const ContactList = () => {\n//   const dispatch = useDispatch();\n//   const visibleContacts = useSelector(getVisibleContacts);\n//   const contacts = useSelector(getContacts);\n\n//   return (\n//     <ul>\n//       {visibleContacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <p>\n//             <b>{name} </b>\n//             <em>{number}</em>\n//           </p>\n//           <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n//             delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default ContactList;\n\n\n// function ContactList({ contacts, onDeleteContact }) {\n//   return (\n//     <ul>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <p>\n//             <b>{name} </b>\n\n//             <em>{number}</em>\n//           </p>\n//           <button type=\"button\" onClick={() => onDeleteContact(id)}>\n//             Удалить\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// export default ContactList;\n","import { Component } from 'react';\nimport Container from './components/Container/Container';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        <ToastContainer autoClose={5000} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  loading,\n  error,\n  filter\n});\n\n\n// import { combineReducers } from 'redux';\n// import types from './types';\n// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, deleteContact, changeFilter } from './actions';\n\n// const items = createReducer([], {\n//   [addContact]: (state, { payload }) => [...state, payload],\n//   [deleteContact]: (state, { payload }) =>\n//     state.filter(({ id }) => id !== payload),\n// });\n\n// const filter = createReducer('', {\n//   [changeFilter]: (_, { payload }) => payload,\n// });\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import logger from 'redux-logger';\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\n// import contactsReducer from './reducers';\n\n// const middleware = [\n//   ...getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n//   logger,\n// ];\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\n// export const store = configureStore({\n//   reducer: {\n//     contacts: persistReducer(contactsPersistConfig, contactsReducer),\n//   },\n//   middleware,\n//   devTools: process.env.NODE_ENV === 'development',\n// });\n\n// export const persistor = persistStore(store);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n        {/* <BrowserRouter> */}\n          <App />\n        {/* </BrowserRouter> */}\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}